initSidebarItems({"enum":[["FieldSelector","An internal struct used in codegen This represents the recursive selection of a query and is used for normalization"],["OperationType","The type of the operation. This corresponds directly to the GraphQL syntax `query`, `mutation` and `subscription`"],["RequestPolicy","The request policy of the request * `CacheFirst` - Prefers results from the cache, if it's not found it is fetched * `CacheOnly` - Only fetches results from the cache, if it's not found it will simply return `None` for the data * `NetworkOnly` - Only fetches results from the network and ignores the cache. * `CacheAndNetwork` - Returns the result from the cache if it exists, but also refetch from the network and push the result to a subscription. This acts the same as CacheFirst without subscriptions, but has overhead."],["ResultSource","The source of the result (cache or network). Used for debugging"]],"struct":[["DebugInfo","Debug info used for... well, debugging"],["ExtensionMap","A map of keyed extensions The key is only used for JS interop, the Rust version uses the type as the key"],["HeaderPair","A key-value pair used for custom headers"],["Observable","An observable result. This implements stream and unsubscribes on drop. It will receive early (partial or stale) results as well as refreshing when the query is rerun after being invalidated by mutations"],["Operation","A query operation. One of these is fired for each direct query, as well as for query reruns"],["OperationMeta","Metadata for an operation"],["OperationOptions","Options for the operation This is just an internal representation of the union between `QueryOptions` and `ClientOptions`"],["OperationResult","The result of a successful operation."],["QueryOptions","Options that can be passed to a query This will be combined with `ClientOptions`, but `QueryOptions` takes precedence"]],"trait":[["Exchange","The main trait that must be implemented by exchanges"],["ExchangeFactory","An exchange factory. This must be passed to the ClientBuilder by the user, so it should take only necessary parameters."],["Extension","An extension that may be passed by the user to provide additional request options to a third-party exchange. This is only here to allow for JS interop - The implementor of the exchange must deserialize JavaScript input to the best of their ability. Note that this may involve complex operations such as converting `js_sys::Function` to Rust closures or other advanced deserialization. This is not a simple serde-like deserialization"],["QueryInfo","Internal struct used in codegen"]],"type":[["ExchangeResult","The result type returned by exchanges"],["Extensions",""]]});