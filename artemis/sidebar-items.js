initSidebarItems({"enum":[["PathFragment","Part of a path in a query. It can be an object key or an array index. See Error."],["RequestPolicy","The request policy of the request."],["ResultSource","The source of the result (cache or network). Used for debugging."]],"macro":[["ext","Creates a new `ExtensionMap` and fills it with the passed values."],["wasm_client","Generate a WASM client wrapper that gets exported in your WASM binary This is required because WASM doesn't support generics and the regular Client uses a lot of them. It will hard-code your exchanges, as well as other options you may pass to the macro."]],"mod":[["client","Contains client-related types."],["codegen","Types used only by the code generator. Exchanges may use these, but they shouldn't be created/implemented manually."],["default_exchanges","This module contains the default exchanges. Note that these require the `default-exchanges` feature."],["exchange","Types used by custom exchanges. Regular users probably don't need these."],["utils","Contains utility functions mainly used internally, but they're public for use in exchanges and macros."]],"struct":[["ClientBuilder","A builder for the artemis client."],["DebugInfo","Debug info used for... well, debugging."],["Error","An element in the top-level `errors` array of a response body."],["ExtensionMap","A map of keyed extensions. The key is only used for JS interop, the Rust version uses the type as the key."],["HeaderPair","A key-value pair used for custom headers."],["Location","Represents a location inside a query string. Used in errors. See Error."],["Observable","An observable result. This implements `Stream` and unsubscribes on drop. It will receive early (partial or stale) results, as well as refreshing when the query is rerun after being invalidated by mutations."],["QueryBody","The form in which queries are sent over HTTP in most implementations. This will be built using the GraphQLQuery trait normally."],["QueryError","A query error wrapper that allows for cheap and easy cloning across threads. If a `std::error::Error` is needed, use `QueryError.compat()`."],["QueryOptions","Options that can be passed to a query. This will be combined with `ClientOptions`, but `QueryOptions` takes precedence."],["Response","The generic shape taken by the responses of GraphQL APIs."]],"trait":[["GraphQLQuery","A convenience trait that can be used to build a GraphQL request body. This will be implemented for you by codegen. It is implemented on the struct you place the derive on."]],"type":[["Extensions","A thread-safe wrapper around ExtensionMap."]]});